install.packages('poibin')
library(poibin)
xV <- seq(-0.75, 0.75, by=0.05) # voters' ideal points
xL <- -1 # L's ideal point
xR <- 1 # R's ideal point
lambdaL <- 0.1 # L's valence
X <- seq(-1, 1, by=0.1) # z's to try
rho <- function(voterBlissPoints, partyPlatform, otherPlatform, partyValence){
majority <- floor((length(voterBlissPoints)/2) + 1)
partyUtils <- -(abs(voterBlissPoints - partyPlatform)) + partyValence
otherUtils <- -(abs(voterBlissPoints - otherPlatform))
probs <- pnorm(partyUtils - otherUtils)
return(1-ppoibin(length(voterBlissPoints) - majority, probs))
}
util <- function(xL, xV, zL, zR, lambdaL){
prob <- rho(xV, zL, zR, lambdaL)
return(prob*(-abs(xL-zL)) + (1-prob)*(-abs(xL-zR)))
}
BR <- function(xP, xV, z, lambda, party='L'){
# xP is the party's ideal point, z is the platform the party is responding to
if (party == 'R') {
lambda = -lambda
}
Z <- seq(-1, 1, by=0.1)
return(Z[which.max(sapply(Z, function(x) util(xP, xV, x, z, lambda)))])
}
equilibrium <- function(X, xV, lambdaL){
L <- max(sapply(X, function(x) BR(xL, xV, x, lambdaL)))
R <- min(sapply(X, function(x) BR(xR, xV, x, lambdaL, party='R')))
return(c(L, R))
}
sapply(X, function(x) rho(xV, BR(xL, xV, x, lambdaL), x, lambdaL))
equilibrium(X, xV, lambdaL)
setClass('door',
slots=c(number='numeric')
)
setValidity('door',
function(object){
# Note that the number must be 1, 2, or 3 to be valid;
# that is, even if the number is some other integer it won't work
# I did it this way because the game has only three doors
if (!(object@number %in% 1:3)) {
return('@number is not a valid door number')
}
}
)
setMethod("initialize",
"door",
function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
}
)
new('door', number=c(1, 1))
new('door', number=5)
setValidity('door',
function(object){
# Note that the number must be 1, 2, or 3 to be valid;
# that is, even if the number is some other integer it won't work
# I did it this way because the game has only three doors
if (length(object@number) > 1) {
return('Choose only one door number!')
}
if (!(object@number %in% 1:3)) {
return('@number is not a valid door number')
}
}
)
new('door', number=c(1, 1))
equil <- equilibrium(X, xV, lambdaL)
rho(xV, equil[1], equil[2], lambdaL)
mu <- function(xV, xP, xO, lambdaP){
partyUtils <- -(abs(xV - xP)) + lambdaP
otherUtils <- -(abs(xV - xO))
return(sum(pnorm(partyUtils - otherUtils)))
}
mu(xV, equil[1], equil[2], lambdaL)
mu <- function(xV, xP, xO, lambdaP){
partyUtils <- -(abs(xV - xP)) + lambdaP
otherUtils <- -(abs(xV - xO))
return(sum(pnorm(partyUtils - otherUtils))/length(xV))
}
mu(xV, equil[1], equil[2], lambdaL)
sapply(X, function(x) mu(xV, x, equil[2], lambdaL))
rm(list=ls())
##
#' Create an object of class \code{door}
#'
#' This function creates an object of S3 class \code{door}.
#'
#' @param x a natural number between one and three inclusive
#'
#' @return If \code{x} is a natural number between one and three inclusive,
#'   \code{x} is returned with its class changed to \code{door}.
#'   If \code{x} is not a natural number between one and three inclusive,
#'   an error is thrown with a message informing the user that \code{x} is not
#'   a valid \code{door} number.
#'
#' @seealso \code{\link{PlayGame.Door}}
#'
#' @author JB Duck-Mayr
#'
Door <- function(x){
if (length(x) > 1) {
stop('Choose only one door number!', call.=FALSE)
}
if (!(x %in% 1:3)) {
stop(x, ' is not a valid door number', call.=FALSE)
}
class(x) <- 'door'
return(x)
}
##
#' Generic function for \code{PlayGame}
#'
#' This is the generic function for \code{PlayGame}
#'
#' @param x an object used to select a method
#'
#' @seealso \code{\link{PlayGame.Door}}
#'
#' @author JB Duck-Mayr
#'
PlayGame <- function(x){
UseMethod('PlayGame')
}
#
#' \code{PlayGame} method for class \code{door}
#'
#' This is the S3 \code{PlayGame} method for class \code{door}.
#'
#' Let's make a deal! \code{PlayGame.Door} randomly chooses a natural number
#' between one and three inclusive that determines which \code{door} value is
#' a winner. If it matches the input \code{door} value, the user is informed
#' she has won a brand new car! If it does not match the input \code{door}
#' value, the user is informed she is not a winner.
#'
#' @param x a \code{door} object
#'
#' @return If \code{x} is equal to the number chosen by \code{PlayGame.Door},
#'   a congratulatory message is printed informing the user she has won.
#'   Otherwise, a message is printed informing the user she has not won.
#'
#' @seealso \code{\link{Door}}
#'
#' @author JB Duck-Mayr
#'
PlayGame.door <- function(x){
prizeDoor <- sample(1:3, 1)
if (x == prizeDoor) {
print("Congratualations! You've just won a brand new car!")
}
else {
print("Oh no... looks like you're not a winner!")
}
}
exampleDoor <- Door(3)
Door('a')
Door(5)
Door(1.3)
Door(c(1, 1))
replicate(10, PlayGame(exampleDoor)) # do it 10 times to see different outcomes
replicate(10, PlayGame(exampleDoor), simplify='vector') # do it 10 times to see different outcomes
invisible(replicate(10, PlayGame(exampleDoor)))
rm(list=ls())
setwd('~/Rclass/PS3')
source('PlayGameS3.R')
exampleDoor <- Door(3)
Door('a')
Door(5)
Door(1.3)
Door(c(1, 1))
invisible(replicate(10, PlayGame(exampleDoor)))
rm(list=c('Door', 'PlayGame', 'PlayGame.door'))
source('PlayGameS4.R')
exampleDoor <- new('door', 2)
exampleDoor <- new('door', number=2)
new('door', number='a')
new('door', number=5)
new('door', number=1.3)
new('door', number=c(1, 1))
invisible(replicate(10, PlayGame(exampleDoor)))
rm(list=ls())
setClass('door',
slots=c(number='numeric')
)
setValidity('door',
function(object){
# Note that the number must be 1, 2, or 3 to be valid;
# that is, even if the number is some other integer it won't work
# I did it this way because the game has only three doors
if (!(class(object@number == 'numeric'))) {
return('@number is not a valid door number')
}
if (length(object@number) > 1) {
return('Choose only one door number!')
}
if (!(object@number %in% 1:3)) {
return('@number is not a valid door number')
}
}
)
setMethod("initialize",
"door",
function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
}
)
new('door', number='a')
rm(list=ls())
